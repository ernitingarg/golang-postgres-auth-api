// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: product.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  title,
  content,
  price,
  customer_id
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, title, content, price, created_at, updated_at, customer_id
`

type CreateProductParams struct {
	Title      string      `json:"title"`
	Content    pgtype.Text `json:"content"`
	Price      float64     `json:"price"`
	CustomerID int64       `json:"customerId"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Title,
		arg.Content,
		arg.Price,
		arg.CustomerID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CustomerID,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, title, content, price, created_at, updated_at, customer_id FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CustomerID,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, title, content, price, created_at, updated_at, customer_id FROM products
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CustomerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
  set title = $2,
  content = $3,
  price = $4
WHERE id = $1
RETURNING id, title, content, price, created_at, updated_at, customer_id
`

type UpdateProductParams struct {
	ID      int32       `json:"id"`
	Title   string      `json:"title"`
	Content pgtype.Text `json:"content"`
	Price   float64     `json:"price"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Price,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CustomerID,
	)
	return i, err
}
